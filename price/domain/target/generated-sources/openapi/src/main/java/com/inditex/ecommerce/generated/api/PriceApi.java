/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.inditex.ecommerce.generated.api;

import com.inditex.ecommerce.generated.model.Filter;
import com.inditex.ecommerce.generated.model.PriceResult;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-06T13:19:35.303546200+01:00[Europe/Madrid]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "getPrice", description = "the getPrice API")
public interface PriceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /price : Get a price
     *
     * @param filter Body with the properties to filter (required)
     * @return Response of the finding process in the price talbe (status code 200)
     */
    @Operation(
        operationId = "getPrice",
        summary = "Get a price",
        tags = { "getPrice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response of the finding process in the price talbe", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceResult.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/price",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PriceResult> _getPrice(
        @Parameter(name = "Filter", description = "Body with the properties to filter", required = true) @Valid @RequestBody Filter filter
    ) {
        return getPrice(filter);
    }

    // Override this method
    default  ResponseEntity<PriceResult> getPrice(Filter filter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"productId\" : 0, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 5.962133916683182, \"brandId\" : 6, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"priceList\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
